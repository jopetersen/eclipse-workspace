/*
 * 
 * specifications:Private fields

String customerName - Initialized in default constructor to "none"
String currentDate - Initialized in default constructor to "January 1, 2016"
ArrayList cartItems
Default constructor

Parameterized constructor which takes the customer name and date as parameters (1 pt)

Public member methods

getCustomerName() accessor (1 pt)
getDate() accessor (1 pt)
addItem()
Adds an item to cartItems array. Has parameter ItemToPurchase. Does not return anything.
removeItem()
Removes item from cartItems array. Has a string (an item's name) parameter. Does not return anything.
If item name cannot be found, output this message: Item not found in cart. Nothing removed.
modifyItem()
Modifies an item's description, price, and/or quantity. Has parameter ItemToPurchase. Does not return anything.
If item can be found (by name) in cart, check if parameter has default values for description, price, and quantity. If not, modify item in cart.
If item cannot be found (by name) in cart, output this message: Item not found in cart. Nothing modified.
getNumItemsInCart() (2 pts)
Returns quantity of all items in cart. Has no parameters.
getCostOfCart() (2 pts)
Determines and returns the total cost of items in cart. Has no parameters.
printTotal()
Outputs total of objects in cart.
If cart is empty, output this message: SHOPPING CART IS EMPTY
printDescriptions()
Outputs each item's description.
 * 
 * 
 */

import java.util.ArrayList;

class ShoppingCart {
	private String customerName;
	private String currentDate;
	ArrayList<ItemToPurchase> cartItems = new ArrayList<ItemToPurchase>();;
	public ShoppingCart() {
		currentDate = "January 1, 2016";
		customerName = "none";
	}
	public ShoppingCart(String name, String date) {
		this.currentDate = date;
		this.customerName = name;
	}

	public String getCustomerName() {
		return customerName;
	}

	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}

	public String getCurrentDate() {
		return currentDate;
	}

	public void setCurrentDate(String currentDate) {

		this.currentDate = currentDate;

	}

	public void addItem(ItemToPurchase i) {
		cartItems.add(i);
	}

	public void removeItem(String name) {
		boolean found = false;
		for (ItemToPurchase i : cartItems) {
			if (i.getName().equalsIgnoreCase(name)) {
				cartItems.remove(i);
				found = true;
				break;
			}
		}

		if (!found)
			System.out.println("Item not found in cart. Nothing removed");
	}
	public void modifyItem(ItemToPurchase item) {
		boolean found = false;
		;
		for (ItemToPurchase i : cartItems) {
			if (i.getName().equalsIgnoreCase(item.getName())) {
				if (i.getQuantity() != 0) {
					i.setQuantity(item.getQuantity());
				}
				found = true;
				break;
			}
		}
		if (!found)
			System.out.println("Item not found in cart. Nothing removed");
	}

	public int getNumItemsInCart() {
		int sum = 0;
		for (ItemToPurchase i : cartItems) {
			sum = sum + i.getQuantity();
		}
		return sum;
	}
	public double getCostOfCart() {
		double sum = 0;
		for (ItemToPurchase i : cartItems) {
			sum = sum + i.getPrice();
		}
		return sum;
	}
	public void printTotal() {
		if (cartItems != null && cartItems.size() > 0) {
			System.out.println(customerName + "'s Shopping Cart - " + currentDate);
			System.out.println("Number of Items: " + cartItems.size());
			System.out.println();
			for (ItemToPurchase i : cartItems) {
				i.printCost();
			}
		}
		else {
			System.out.println("SHOPPING CART IS EMPTY");
		}
	}
	
	public void printDescriptions() {
		System.out.println(customerName + "'s Shopping Cart - " + currentDate);
		System.out.println("Number of Items: " + cartItems.size());
		System.out.println();
		System.out.println("Item Descriptions");
		for (ItemToPurchase i : cartItems) {
			i.printDescription();
		}
	}

}